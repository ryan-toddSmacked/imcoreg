function [img1p, img2p, varargout] = imcoreg(img1, img2, numFeatures, thresh, initBlur, lowestScale)
% [img1p, img2p, varargout] = IMCOREG(img1, img2, numFeatures, initBlur, thresh, lowestScale)
%
% Coregister two imges using SIFT and RANSAC.
% Color images are converted to grayscale.
%
% Returned padded images are always uint8 in range [0-255].
%
% Args:
%   img1 - First image values
%   img2 - Second image values
%
% Optional Args:
%   numFeatures=4000 - Maximum number of features to detect per image
%   thresh=3.0 - Threshold for matching features. Higher values keeps less features
%   initBlur=1.0 - Initial gaussian blur in SIFT
%   lowestScale - Initial scale to start at
%
%
% Outputs:
%   img1p - First image padded to allign pixels
%   img2p - Second image padded to allign pixels
%
% Varargout{1} - Homography matrix generated by RANSAC
% Varargout{2} - Inlier Ratio, percent of features that matched between images
%
% Example:
%   img1 = imread('onion.png');
%   img2 = imread('peppers.png');
%   [img1p, img2p, H, I] = imcoreg(img1, img2, 12000, 2.5);
%   figure; subplot(2,2,1);
%   imagesc(img1);
%   subplot(2,2,2);
%   imagesc(img2);
%   subplot(2,2,3);
%   imagesc(img1p);
%   subplot(2,2,4);
%   imagesc(img2p);
%

    arguments
        img1 (:,:,:) {mustBeNumeric}
        img2 (:,:,:) {mustBeNumeric}
        numFeatures (1,1) {mustBePositive} = 4000
        thresh (1,1) {mustBePositive} = 3.0
        initBlur (1,1) {mustBePositive} = 1.0
        lowestScale (1,1) {mustBeNonnegative} = 0.0
    end

    % clear imcoregmx
    % convert images to grayscale if needed
    if (size(img1, 3) == 3)
        img1 = rgb2gray(img1);
    elseif (size(img1, 3) > 3)
        error("In imcoreg, images must be grayscale or RGB\n");
    end

    if (size(img2, 3) == 3)
        img2 = rgb2gray(img2);
    elseif (size(img2, 3) > 3)
        error("In imcoreg, images must be grayscale or RGB\n");
    end

    % convert to single
    img1 = single(img1);
    img2 = single(img2);

    [img1p, img2p, H, I] = imcoregmx(img1.', img2.', numFeatures, initBlur, thresh, lowestScale);

    img1p = uint8(img1p);
    img2p = uint8(img2p);

    if (nargout > 2)
        varargout{1} = H;
    end

    if (nargout > 3)
        varargout{2} = I;
    end

    % clear imcoregmx
end

